'use strict';

// server-side socket behaviour
var ios = null; // io is already taken in express
var util = require('Litecore').util;
var logger = require('../../lib/logger').logger;

module.exports.init = function(io_ext) {
  ios = io_ext;
  if (ios) {
    // when a new socket connects
    ios.sockets.on('connection', function(socket) {
      logger.verbose('New connection from ' + socket.id);
      // when it subscribes, make it join the according room
      socket.on('subscribe', function(topic) {
        logger.debug('subscribe to ' + topic);
        socket.join(topic);
        socket.emit('subscribed');
      });

      // disconnect handler
      socket.on('disconnect', function() {
        logger.verbose('disconnected ' + socket.id);
      });

    });
  }
  return ios;
};

var simpleTx = function(tx) {
  return {
    txid: tx
  };
};


var fullTx = function(tx) {
  return {
    txid: tx.txid,
    size: tx.size,
    valueOut: Number(tx.valueOut).toFixed(8), // Convert to number and format
    valueIn: Number(tx.valueIn).toFixed(8), // Convert to number and format
    fees: Number(tx.fees).toFixed(8), // Convert to number and format
    vout: tx.vout.map(function(o) {
      return {
        addresses: o.scriptPubKey.addresses,
        value: Number(o.value).toFixed(8), // Ensure value is a number and format it
        n: o.n
      };
    }),
    vin: tx.vin.map(function(v) {
      return {
        txid: v.txid,
        vout: v.vout,
        scriptSig: v.scriptSig
      };
    })
  };
};




module.exports.broadcastTx = function(tx) {
  if (ios) {
    var t = (typeof tx === 'string') ? simpleTx(tx) : fullTx(tx);
    logger.debug('Broadcasting transaction: ' + t);
    ios.sockets.in('inv').emit('tx', t);
  } else {
    logger.error('Socket not initialized.');
  }
};

module.exports.broadcastBlock = function(block) {
  if (ios) {
    logger.debug('Broadcasting block' + block);
    ios.sockets.in('inv').emit('block', block);
  } else {
    logger.error('Socket not initialized.');
  }
};

module.exports.broadcastAddressTx = function(txid, address) {
  if (ios) {
    logger.debug('Broadcasting address' + txid);
    ios.sockets.in(address).emit(address, txid);
  }
};

module.exports.broadcastSyncInfo = function(historicSync) {
  if (ios){
    logger.debug('Broadcasting block');
    ios.sockets.in('sync').emit('status', historicSync);
  }
  else {
    logger.error('Socket not initialized.');
  }
};
